(value - minValue)/(maxValue - minValue)
}
#plan: Find min and max for each participant and then calculate the value using the scale function.
#this is normalizing by scale usage during the experiment, rather than overall scale usage during the trial
#later I can try normalizing by the scale usage from the beginning of the data
#work with testDataRename
subjMinMax <- ddply(testDataRename, .variables = c("Subject"), .fun = summarize, minValue = min(value), maxValue = max(value))
testDataMinMax <- merge(testDataRename, subjMinMax)
testDataMinMax$normValue <- scale01(testDataMinMax$value, testDataMinMax$minValue, testDataMinMax$maxValue)
testDataMinMax$Running.Block. <- factor(testDataMinMax$Running.Block., levels = c("Test1", "Test2"), labels = c("Nonenol", "Linalool"))
testDataMinMax$OdorType <- factor(testDataMinMax$OdorType, levels = c("TMAAlone", "DifferentNostrils", "SameNostril", "Blank", "AntagAlone"))
#export this df for Sianneh to learn some R with
#write.csv(testDataMinMax, "/Volumes/mainland/Users/Sianneh\ Vesslee/R_SplitNostrilData_graph")
ggplot(testDataMinMax, aes(x = OdorType, y = normValue)) +
geom_violin() +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Normalized Intensity Rating") +
ylab("Nostril Type")
ggplot(testDataMinMax, aes(x = OdorType, y = normValue)) +
geom_boxplot() +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Normalized Intensity Rating") +
ylab("Nostril Type")
#graph to match Sianneh's
testDataAverages <- ddply(testDataMinMax, .variables = c("Running.Block.", "OdorType", "IntensityRating"), .fun = summarize, average = mean(normValue), stdev = sd(normValue), stderror= stdev/sqrt(length(normValue)))
ggplot(testDataAverages, aes(x = OdorType, y = average, fill = OdorType)) +
geom_bar(stat = "identity") +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Nostril Type") +
ylab("Normalized Intensity Rating") +
geom_errorbar(aes(ymin = average-stderror, ymax = average+stderror), position = "dodge")
setwd("/Volumes/mainland/Users/Sianneh\ Vesslee/")
library(ggplot2)
#import data
Data <- read.csv("R_SplitNostrilData_graph")
Data$OdorType <- factor(Data$OdorType, levels = c("TMAAlone", "DifferentNostrils", "SameNostril", "AntagAlone", "Blank"), labels = c("TMA Alone", "Different Nostrils", "Same Nostrils", "Antagonist Alone", "Blank"))
Data$Running.Block. <- factor(Data$Running.Block., levels = c("Nonenol", "Linalool"), labels = c("Trans-2-nonen-1-ol", "Linalool"))
Data$IntensityRating <- factor(Data$IntensityRating, levels = c("FishyRating", "AntagRating"), labels = c("Fishy Rating", "Antagonist Rating"))
#graph
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 14),
strip.text.x = element_text(size = 18),
strip.text.y = element_text(size = 18),
strip.background = element_rect(fill = 'white'),
text = element_text(size=18)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 16),
strip.text.x = element_text(size = 18),
strip.text.y = element_text(size = 18),
strip.background = element_rect(fill = 'white'),
text = element_text(size=18)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 28),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 18),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
pdf("FinalGraphAntag.pdf", height = 8, width = 18)
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 18),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 18, color = "black"),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 18, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
pdf("FinalGraphAntag.pdf", height = 8, width = 18)
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
pdf("FinalGraphAntag.pdf", height = 8, width = 18)
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0)
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
pdf("FinalGraphAntag.pdf", height = 8, width = 18)
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Linalool"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
pdf("FinalGraphControl.pdf", height = 8, width = 14)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Linalool"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
pdf("FinalGraphControl.pdf", height = 8, width = 18)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Linalool"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
library(reshape2)
library(ggplot2)
library(plyr)
#read all files from directory
subj <- dir(path = "/Volumes/mainland/Projects/TMA blocker/Split Nostril Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/DataPilot2/", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#check number of participants
numParticipants <- length(unique(df$Subject))
#subset to get the test data
testData <- subset(df, TestMode == "No" & Procedure.SubTrial. == "ExperimentProc" & Subject !=1 & Subject != 2 & Subject !=57, select = c ("Subject", "Running.Block.", "Trial", "IntensityRatingAntag", "IntensityRatingFishy", "RightType", "LeftType"))
#convert scales (these scales are on a different scale than the previous scales)
#580 is zero on the scale and 80 is the highest
testData$FishyRating  <- 580 - as.integer(testData$IntensityRatingFishy)
testData$AntagRating  <- 580 - as.integer(testData$IntensityRatingAntag)
#make sure the conversion worked - there should be no items coming up in this test
checkConversion <- testData[which(testData$FishyRating < 0 | testData$AntagRating <0),]
View(testData)
#name the variables the other way
nostriltyperelabel <- read.csv("/Volumes/mainland/Projects/TMA\ blocker/Split\ Nostril\ Study/Setup2-Olfactometer/Raw\ Data\ 3-2016/NostrilTypeRelabel.csv")
testDataRename <- merge (testData.melt, nostriltyperelabel)
View(testDataRename)
#tidy up data
testData.sub <- subset(testData, select = c("Subject", "Running.Block.", "Trial","RightType", "LeftType", "FishyRating", "AntagRating"))
testData.melt <- melt(testData.sub, c("Subject", "Running.Block.", "Trial","RightType", "LeftType"), factorsAsStrings = FALSE)
testData.melt$value <- as.double(testData.melt$value)
testData.melt <- rename(testData.melt, c("variable" = "IntensityRating")) #rename variable
#name the variables the other way
nostriltyperelabel <- read.csv("/Volumes/mainland/Projects/TMA\ blocker/Split\ Nostril\ Study/Setup2-Olfactometer/Raw\ Data\ 3-2016/NostrilTypeRelabel.csv")
testDataRename <- merge (testData.melt, nostriltyperelabel)
View(testDataRename)
subj28 <- subset(testDataRename, Subject == 28)
View(subj28)
#Import Libraries
library(reshape2)
library(ggplot2)
library(plyr)
#read all files from directory
subj <- dir(path = "/Volumes/mainland/Projects/TMA blocker/Split Nostril Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/DataPilot2/", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#check number of participants
numParticipants <- length(unique(df$Subject))
#subset to get the test data
testData <- subset(df, TestMode == "No" & Procedure.SubTrial. == "ExperimentProc" & Subject !=1 & Subject != 2 & Subject !=57, select = c ("Subject", "Running.Block.", "Trial", "IntensityRatingAntag", "IntensityRatingFishy", "RightType", "LeftType"))
#get the training data from the scale
scaleTrainingData <- subset(df, Procedure.Block. == "ScaleTrainingProc", select = c("Subject", "Procedure.Block.", "ScaleTraining", "Question.Trial.", "IntensityRatingTraining.Trial."))
#get the training data from the smell training (quiz and such)
smellTrainingQuiz <- subset(df, Procedure.Trial. == "training" | Procedure.Trial. == "Quiz", select = c("Subject", "Procedure.Block.", "IntensityRatingTraining.Trial.", "OdorType", "Procedure.Trial.", "Descriptor", "QuizPage.RESP", "Running.Block."))
#convert scales (these scales are on a different scale than the previous scales)
#580 is zero on the scale and 80 is the highest
testData$FishyRating  <- 580 - as.integer(testData$IntensityRatingFishy)
testData$AntagRating  <- 580 - as.integer(testData$IntensityRatingAntag)
#make sure the conversion worked - there should be no items coming up in this test
checkConversion <- testData[which(testData$FishyRating < 0 | testData$AntagRating <0),]
#make new labels and averages
testData.sub <- subset(testData, select = c("Subject", "Running.Block.", "Trial","RightType", "LeftType", "FishyRating", "AntagRating"))
#write.csv(testData.sub, "/Volumes/storage/mainland/Projects/TMA\ blocker/Split\ Nostril\ Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/SplitNostrilDataSummer2016.csv") #This outputs a file that Sianneh was using to analyze data for MSAP project
# testData.excel <- merge(testData.sub, nostriltyperelabel)
# #this doesn't work #testData.excel.fishy <- subset(testData.excel, select = c("Subject", "Running.Block.", "OdorType", "FishyRating"))
# testData.excel.antagcontrol <- subset(testData.excel, select = c("Subject", "Running.Block.", "OdorType", "FishyRating", "AntagRating"))
# write.csv(testData.excel.antagcontrol, "/Volumes/mainland/Projects/TMA\ blocker/Split\ Nostril\ Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/SplitNostrilDataSummer2016_FinalDataset.csv")
testData.melt <- melt(testData.sub, c("Subject", "Running.Block.", "Trial","RightType", "LeftType"), factorsAsStrings = FALSE)
testData.melt$value <- as.double(testData.melt$value)
testData.melt <- rename(testData.melt, c("variable" = "IntensityRating")) #rename variable
testDataBlock1 <- ddply(.data = subset(testData.melt, Running.Block. == "Test1"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Nonenol" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Nonenol"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Nonenol") | (RightType == "Nonenol" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Nonenol" | LeftType == "TMA+Nonenol"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock2 <- ddply(.data = subset(testData.melt, Running.Block. == "Test2"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Linalool" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Linalool"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Linalool") | (RightType == "Linalool" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Linalool" | LeftType == "TMA+Linalool"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock1.melt <- melt(testDataBlock1, c("Subject", "IntensityRating", "Running.Block."))
testDataBlock2.melt <- melt(testDataBlock2, c("Subject", "IntensityRating", "Running.Block."))
ggplot(data = subset(testDataBlock1.melt, IntensityRating %in% "FishyRating"), aes(x = variable, y = value))+
geom_point(position = position_jitter(w = .1)) +
facet_grid(Subject~.)
View(testData.melt)
testDataBlock1 <- ddply(.data = subset(testData.melt, Running.Block. == "Test1"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Nonenol" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Nonenol"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Nonenol") | (RightType == "Nonenol" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Nonenol" | LeftType == "TMA+Nonenol"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock2 <- ddply(.data = subset(testData.melt, Running.Block. == "Test2"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Linalool" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Linalool"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Linalool") | (RightType == "Linalool" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Linalool" | LeftType == "TMA+Linalool"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock1.melt <- melt(testDataBlock1, c("Subject", "IntensityRating", "Running.Block."))
testDataBlock2.melt <- melt(testDataBlock2, c("Subject", "IntensityRating", "Running.Block."))
subj28 <- subset(testDataBlock1.melt, Subject == 28)
View(nostriltyperelabel)
subj28 <- subset(testDataRename, Subject == 28)
ggplot(subj28, aes(x = odorType, y = value )) +
geom_point()
facet_grid(Running.Block. ~ IntensityRating)
ggplot(subj28, aes(x = odorType, y = value )) +
geom_point() +
facet_grid(Running.Block. ~ IntensityRating)
ggplot(subj28, aes(x = OdorType, y = value )) +
geom_point() +
facet_grid(Running.Block. ~ IntensityRating)
subj28.sub <- subset(subj28, Running.Block. == "Test1", OdorType == "Blank")
subj28.sub <- subset(subj28, Running.Block. == "Test1" & OdorType == "Blank")
View(subj28.sub)
subj28.sub <- subset(subj28, Running.Block. == "Test1" & OdorType == "Blank" & IntensityRating == "FishyRating")
subj28.sub <- subset(subj28, Running.Block. == "Test1" & OdorType == "TMAAlone" & IntensityRating == "FishyRating")
testDataRename1 <- subset(testDataRename, Trial < 10)
testDataRename2 <- subset(testDataRename, Trial >=10)
View(testDataRename2)
testDataRename2 <- subset(testDataRename, Trial >9)
testDataRename2 <- subset(testDataRename, Trial >  9)
View(testDataRename1)
testDataRename$Trial <- as.numeric(testDataRename$Trial)
testDataRename1 <- subset(testDataRename, Trial < 10)
testDataRename2 <- subset(testDataRename, Trial >  9)
View(testDataRename1)
View(testDataRename2)
testDataRename1 <- testDataRename1[,-5]
testDataRename2 <- testDataRename2[,-5]
names(testDataRename1) <- c("RightType", "LeftType", "Subject", "Test", "IntensityRating", "trial1", "OdorType", "RightNostril", "LeftNostril")
names(testDataRename2) <- c("RightType", "LeftType", "Subject", "Test", "IntensityRating", "trial2", "OdorType", "RightNostril", "LeftNostril")
testData.trials <- merge(testDataRename1, testDataRename2)
View(testData.trials)
ggplot(subset(testData.trials, Test %in% Test1), aes(x = trial1, y = trial2)) +
geom(point)
ggplot(subset(testData.trials, Test %in% "Test1"), aes(x = trial1, y = trial2)) +
geom(point)
ggplot(subset(testData.trials, Test %in% "Test1"), aes(x = trial1, y = trial2)) +
geom_point()
ggplot(subset(testData.trials, Test %in% "Test1"), aes(x = trial1, y = trial2)) +
geom_point() +
facet_grid(IntensityRating ~ Subject)
ggplot(subset(testData.trials, Test %in% "Test1"), aes(x = trial1, y = trial2, colour = factor(subject))) +
geom_point() +
facet_grid(IntensityRating ~.)
ggplot(subset(testData.trials, Test %in% "Test1"), aes(x = trial1, y = trial2, colour = factor(Subject))) +
geom_point() +
facet_grid(IntensityRating ~.)
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test", "RightNostril", "LeftNostril"), function(x) cor(x, method = "pearson"))
test  <- subset(testData.trials, select = c("Subject", "IntensityRating", "Test", "RightNostril", "LeftNostril"))
View(test)
rm(test)
?cor
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test", "RightNostril", "LeftNostril"), function(k) cor(x = trial1, y=trial2, method = "pearson"))
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test", "RightNostril", "LeftNostril"), function(k) trial.cor = cor(x = trial1, y=trial2, method = "pearson"))
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test"), function(k) trial.cor = cor(x = trial1, y=trial2, method = "pearson"))
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test"), function(k) trial.cor = cor(x = trial1, y=trial2, method = "pearson"))
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test"), function(k) trial.cor = cor(x = trial1, y=trial2))
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test"), function(k) trial.cor = cor(x = trial1, y=trial2))
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test"), function(k) trial.cor = cor(x = trial1, y = trial2))
testData.corr <- ddply(testData.trials, .variables = c("Subject", "IntensityRating", "Test"), function(x) trial.cor = cor(x$trial1, x$trial2))
View(testData.corr)
ggplot(subset(testData.trials, Subject %in% c(28,29,30)), aes(x = trial1, y = trial2, colour = factor(Subject))) +
geom_point() +
facet_grid(IntensityRating ~.)
ggplot(subset(testData.trials, Subject %in% c(28,29,30) & Test = Test1), aes(x = trial1, y = trial2, colour = factor(Subject))) +
geom_point() +
facet_grid(IntensityRating ~.)
ggplot(subset(testData.trials, Subject %in% c(28,29,30) & Test == "Test1"), aes(x = trial1, y = trial2, colour = factor(Subject))) +
geom_point() +
facet_grid(IntensityRating ~.)
testData.corr$trial.corr <- abs(testData.corr$V1)
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_grid(.~subject)
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_grid(.~Subject)
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_wrap(.~Subject)
?facet_wrap
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_wrap(Subject)
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_wrap(~Subject)
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_wrap(~Subject) +
geom_hline(x = .5)
?geom_hline
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_wrap(~Subject) +
geom_hline(yintercept= .5)
goodPeople <- subset(testDataBlock1.melt, Subject %in% c(29, 31, 37, 42, 50, 56))
ggplot(data = subset(goodPeople, IntensityRating %in% "FishyRating"), aes(x = variable, y = value))+
geom_point(position = position_jitter(w = .1)) +
facet_grid(Subject~.)
ggplot(testData.trials, aes(x = trial1, y = trial2, colour = factor(Subject))) +
geom_point() +
facet_grid(IntensityRating ~Test)
testData.corr$trial.corr <- abs(testData.corr$V1)
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_wrap(~Subject) +
geom_hline(yintercept= .5)
ggplot(testData.trials, aes(x = trial1, y = trial2, colour = factor(Subject))) +
geom_point() +
facet_grid(IntensityRating ~Test)
ggplot(subset(testData.trials, Subject %in% c(28,29,30) & Test == "Test1"), aes(x = trial1, y = trial2, colour = factor(Subject))) +
geom_point() +
facet_grid(IntensityRating ~.)
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_wrap(~Subject) +
geom_hline(yintercept= .5)
ggplot(testData.corr, aes(x = Test, y = trial.corr, colour = IntensityRating))+
geom_point() +
facet_wrap(~Subject) +
geom_hline(yintercept= .5) +
ylab("Pearson's Correlation") +
ggtitle("Test-Retest Correlation per subject")
