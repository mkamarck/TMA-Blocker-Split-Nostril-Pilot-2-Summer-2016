library(plyr)
#read all files from directory
subj <- dir(path = "/Volumes/mainland/Projects/TMA blocker/Split Nostril Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/DataPilot2/", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
#check number of participants
numParticipants <- length(unique(df$Subject))
#subset to get the test data
testData <- subset(df, TestMode == "No" & Procedure.SubTrial. == "ExperimentProc" & Subject !=1 & Subject != 2 & Subject !=57, select = c ("Subject", "Running.Block.", "Trial", "IntensityRatingAntag", "IntensityRatingFishy", "RightType", "LeftType"))
#get the training data from the scale
scaleTrainingData <- subset(df, Procedure.Block. == "ScaleTrainingProc", select = c("Subject", "Procedure.Block.", "ScaleTraining", "Question.Trial.", "IntensityRatingTraining.Trial."))
#get the training data from the smell training (quiz and such)
smellTrainingQuiz <- subset(df, Procedure.Trial. == "training" | Procedure.Trial. == "Quiz", select = c("Subject", "Procedure.Block.", "IntensityRatingTraining.Trial.", "OdorType", "Procedure.Trial.", "Descriptor", "QuizPage.RESP"))
View(smellTrainingQuiz)
smellTrainingQuiz <- subset(df, Procedure.Trial. == "Quiz", select = c("Subject", "Procedure.Block.", "IntensityRatingTraining.Trial.", "OdorType", "Procedure.Trial.", "Descriptor", "QuizPage.RESP"))
smellTrainingQuiz <- subset(df, Procedure.Trial. == "training" | Procedure.Trial. == "Quiz", select = c("Subject", "Procedure.Block.", "IntensityRatingTraining.Trial.", "OdorType", "Procedure.Trial.", "Descriptor", "QuizPage.RESP", "Running.Block."))
quizAntag <- subset(smellTrainingQuiz, Running.Block. == "Train1")
quizControl <- subset(smellTrainingQuiz, Running.Block. == "Train2")
View(quizAntag)
smellTrainingQuiz <- subset(df, Procedure.Trial. == "Quiz", select = c("Subject", "Procedure.Block.", "IntensityRatingTraining.Trial.", "OdorType", "Procedure.Trial.", "Descriptor", "QuizPage.RESP", "Running.Block."))
quizAntag <- subset(smellTrainingQuiz, Running.Block. == "Train1")
quizControl <- subset(smellTrainingQuiz, Running.Block. == "Train2")
smellTrainingQuiz <- subset(df, Procedure.Trial. == "Quiz", select = c("Subject", "Procedure.Block.", "IntensityRatingTraining.Trial.", "OdorType", "Procedure.Trial.", "QuizPage.RESP", "Running.Block."))
quizAntag <- subset(smellTrainingQuiz, Running.Block. == "Train1")
quizControl <- subset(smellTrainingQuiz, Running.Block. == "Train2")
View(df)
smellTrainingQuiz <- subset(df, Procedure.Trial. == "Quiz"& Subject !=1 & Subject != 2 & Subject !=57, select = c("Subject", "Procedure.Block.", "IntensityRatingTraining.Trial.", "OdorType", "Procedure.Trial.", "QuizPage.RESP", "Running.Block."))
quizAntag <- subset(smellTrainingQuiz, Running.Block. == "Train1")
quizControl <- subset(smellTrainingQuiz, Running.Block. == "Train2")
smellTrainingQuiz <- subset(df, Procedure.Trial. == "Quiz"& Subject !=1 & Subject != 2 & Subject !=57, select = c("Subject", "Procedure.Block.", "IntensityRatingTraining.Trial.", "OdorType", "Procedure.Trial.", "QuizPage.RESP", "Running.Block.", "CorrectAnswer.Trial."))
quizAntag <- subset(smellTrainingQuiz, Running.Block. == "Train1")
quizControl <- subset(smellTrainingQuiz, Running.Block. == "Train2")
numquizAntag <- ddply(quizAntag, .variables = c("Subject"), .fun = summarize, n = length(x))
numquizAntag <- ddply(quizAntag, .variables = c("Subject"), .fun = summarize, n = length(Subject))
View(numquizAntag)
numquizAntag$Subject[which(n>4)]
numquizAntag$Subject[which(numQuizAntag$n>4)]
numquizAntag$Subject[which(numquizAntag$n>4)]
df <- df[which(df$Subject != (numquizAntag$Subject[which(numquizAntag$n>4)]))]
df <- df[which(df$Subject != c(numquizAntag$Subject[which(numquizAntag$n>4)]))]
df <- df[which(df$Subject != c(numquizAntag$Subject[which(numquizAntag$n>4)])),]
View(df)
df <- df[,which(df$Subject != c(numquizAntag$Subject[which(numquizAntag$n>4)]))]
df <- df[which(df$Subject != c(numquizAntag$Subject[which(numquizAntag$n>4)])),]
df <- df[which(df$Subject != c(numquizAntag$Subject[which(numquizAntag$n>4)])),]
subj <- dir(path = "/Volumes/mainland/Projects/TMA blocker/Split Nostril Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/DataPilot2/", pattern="\\.txt$", full.names=TRUE)# creating a list of all file names
names(subj)  <- basename(subj)
df  <- ldply(subj, read.delim, stringsAsFactors=FALSE)
df <- df[which(df$Subject != c(numquizAntag$Subject[which(numquizAntag$n>4)])),]
View(df)
numquizAntag$Subject[which(numquizAntag$n>4)]
type(numquizAntag$Subject[which(numquizAntag$n>4)])
?what
typeof(numquizAntag$Subject[which(numquizAntag$n>4)])
typeof(df$Subject)
remove <- numquizAntag$Subject[which(numquizAntag$n>4)]
df <- df[!(df$Subject %in% remove),]
testData <- subset(df, TestMode == "No" & Procedure.SubTrial. == "ExperimentProc" & Subject !=1 & Subject != 2 & Subject !=57, select = c ("Subject", "Running.Block.", "Trial", "IntensityRatingAntag", "IntensityRatingFishy", "RightType", "LeftType"))
numParticipants <- length(unique(df$Subject))
testData$FishyRating  <- 580 - as.integer(testData$IntensityRatingFishy)
testData$AntagRating  <- 580 - as.integer(testData$IntensityRatingAntag)
#make sure the conversion worked - there should be no items coming up in this test
checkConversion <- testData[which(testData$FishyRating < 0 | testData$AntagRating <0),]
#make new labels and averages
testData.sub <- subset(testData, select = c("Subject", "Running.Block.", "Trial","RightType", "LeftType", "FishyRating", "AntagRating"))
testData.melt <- melt(testData.sub, c("Subject", "Running.Block.", "Trial","RightType", "LeftType"), factorsAsStrings = FALSE)
testData.melt$value <- as.double(testData.melt$value)
testData.melt <- rename(testData.melt, c("variable" = "IntensityRating")) #rename variable
testDataBlock1 <- ddply(.data = subset(testData.melt, Running.Block. == "Test1"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Nonenol" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Nonenol"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Nonenol") | (RightType == "Nonenol" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Nonenol" | LeftType == "TMA+Nonenol"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock2 <- ddply(.data = subset(testData.melt, Running.Block. == "Test2"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Linalool" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Linalool"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Linalool") | (RightType == "Linalool" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Linalool" | LeftType == "TMA+Linalool"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock1.melt <- melt(testDataBlock1, c("Subject", "IntensityRating", "Running.Block."))
testDataBlock2.melt <- melt(testDataBlock2, c("Subject", "IntensityRating", "Running.Block."))
nostriltyperelabel <- read.csv("/Volumes/mainland/Projects/TMA\ blocker/Split\ Nostril\ Study/Setup2-Olfactometer/Raw\ Data\ 3-2016/NostrilTypeRelabel.csv")
testDataRename <- merge (testData.melt, nostriltyperelabel)
#graph for individuals with all datapoints
ggplot(data = subset(testDataRename, IntensityRating == "FishyRating" & Running.Block. == "Test1"), aes(x = OdorType, y = value)) +
geom_point(position = position_jitter(w = .1)) +
facet_grid(.~Subject)
ggplot(data = subset(testDataRename, IntensityRating == "FishyRating" & Running.Block. == "Test1"), aes(x = OdorType, y = value)) +
geom_boxplot() +
facet_grid(.~Subject)
#just the second half of the participants
# ggplot(data = subset(testDataRename, IntensityRating == "FishyRating" & Running.Block. == "Test1" & Subject >=40), aes(x = OdorType, y = value)) +
#   geom_boxplot() +
#
scale01 <- function(value, minValue, maxValue) {
(value - minValue)/(maxValue - minValue)
}
#plan: Find min and max for each participant and then calculate the value using the scale function.
#this is normalizing by scale usage during the experiment, rather than overall scale usage during the trial
#later I can try normalizing by the scale usage from the beginning of the data
#work with testDataRename
subjMinMax <- ddply(testDataRename, .variables = c("Subject"), .fun = summarize, minValue = min(value), maxValue = max(value))
testDataMinMax <- merge(testDataRename, subjMinMax)
testDataMinMax$normValue <- scale01(testDataMinMax$value, testDataMinMax$minValue, testDataMinMax$maxValue)
testDataMinMax$Running.Block. <- factor(testDataMinMax$Running.Block., levels = c("Test1", "Test2"), labels = c("Nonenol", "Linalool"))
testDataMinMax$OdorType <- factor(testDataMinMax$OdorType, levels = c("TMAAlone", "DifferentNostrils", "SameNostril", "Blank", "AntagAlone"))
#export this df for Sianneh to learn some R with
ggplot(testDataMinMax, aes(x = OdorType, y = normValue)) +
geom_violin() +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Normalized Intensity Rating") +
ylab("Nostril Type")
ggplot(testDataMinMax, aes(x = OdorType, y = normValue)) +
geom_boxplot() +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Normalized Intensity Rating") +
ylab("Nostril Type")
#graph to match Sianneh's
#Find average for each type
testDataAverages <- ddply(testDataMinMax, .variables = c("Running.Block.", "OdorType", "IntensityRating"), .fun = summarize, average = mean(normValue), stdev = sd(normValue), stderror= stdev/sqrt(length(normValue)))
ggplot(testDataAverages, aes(x = OdorType, y = average, fill = OdorType)) +
geom_bar(stat = "identity") +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Nostril Type") +
ylab("Normalized Intensity Rating") +
geom_errorbar(aes(ymin = average-stderror, ymax = average+stderror), position = "dodge")
testDataBlock1 <- ddply(.data = subset(testData.melt, Running.Block. == "Test1"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Nonenol" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Nonenol"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Nonenol") | (RightType == "Nonenol" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Nonenol" | LeftType == "TMA+Nonenol"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock2 <- ddply(.data = subset(testData.melt, Running.Block. == "Test2"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Linalool" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Linalool"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Linalool") | (RightType == "Linalool" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Linalool" | LeftType == "TMA+Linalool"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlockmerge <- rbind(testDataBlock1, testDataBlock2)
testDataBlock.sub <- subset(testDataBlockmerge, IntensityRating == "FishyRating", select = c("Subject", "Running.Block.", "TMAAlone"))
testData.cast <- dcast(testDataBlock.sub, ...~Running.Block., value.var = "TMAAlone")
ggplot(testData.cast, aes(x = Test1, y = Test2)) +
geom_point()+
xlim(0,200) +
ylim(0,200) +
geom_abline(a=1, b=1)
testData.cast$difference <- abs(testData.cast$Test1 - testData.cast$Test2)
testData.cast$Subject[which(testData.cast$difference > 90)]
#37 and 52
ggplot(data = subset(testDataBlock1, IntensityRating == "FishyRating"), aes(x = DifferentNostrils, y = SameNostril, colour = Subject)) +
geom_point() +
xlim(0,200) +
ylim(0,200) +
geom_abline(a=1, b=1)
ggplot(data = subset(testDataBlock2, IntensityRating == "FishyRating"), aes(x = DifferentNostrils, y = SameNostril, colour = Subject)) +
geom_point() +
xlim(0,200) +
ylim(0,200) +
geom_abline(a=1, b=1)
testDataBlock1.unityline <- ddply(.data = subset(testData.melt, Running.Block. == "Test1"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Nonenol") | (RightType == "Nonenol" & LeftType == "TMA"))$value), DifferentNostrilsSE = sd(subset(x, (RightType == "TMA" & LeftType == "Nonenol") | (RightType == "Nonenol" & LeftType == "TMA"))$value/2), SameNostril= mean(subset(x, (RightType == "TMA+Nonenol" | LeftType == "TMA+Nonenol"))$value), SameNostrilSE= mean(subset(x, (RightType == "TMA+Nonenol" | LeftType == "TMA+Nonenol"))$value/2)))
testDataBlock2.unityline <- ddply(.data = subset(testData.melt, Running.Block. == "Test2"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Linalool") | (RightType == "Linalool" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Linalool" | LeftType == "TMA+Linalool"))$value)))
ggplot(data = subset(testDataBlock1.unityline, IntensityRating == "FishyRating"), aes(x = DifferentNostrils, y = SameNostril, colour = Subject)) +
geom_point() +
xlim(0,200) +
ylim(0,200) +
geom_abline(a=1, b=1) +
geom_errorbar(aes(ymin = SameNostril - SameNostrilSE, ymax = SameNostril + SameNostrilSE)) +
geom_text(aes(label = Subject))
ggplot(data = subset(left.unityline, IntensityRating == "FishyRating"), aes(x = DifferentNostrils, y = SameNostril, colour = Subject)) +
geom_point() +
xlim(0,200) +
ylim(0,200) +
geom_abline(a=1, b=1) +
geom_errorbar(aes(ymin = SameNostril - SameNostrilSE, ymax = SameNostril + SameNostrilSE)) +
geom_text(aes(label = Subject))
ggplot(subset(testDataMinMax, RightNostril == 1), aes(x = OdorType, y = normValue)) +
geom_boxplot() +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Normalized Intensity Rating") +
ylab("Nostril Type")
ggplot(subset(testDataMinMax, LeftNostril == 1), aes(x = OdorType, y = normValue)) +
geom_boxplot() +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Normalized Intensity Rating") +
ylab("Nostril Type")
TMA.rightVleft <- subset(testDataMinMax, IntensityRating == "FishyRating" & OdorType == "TMAAlone", select = c("Subject", "RightType", "value"))
TMA.rightVleft_cast <- dcast(TMA.rightVleft, Subject~RightType, fun.aggregate = mean, value.var = "value")
names(TMA.rightVleft_cast) <- c("Subject", "LeftNostril", "RightNostril")
ggplot(TMA.rightVleft_cast, aes(x = LeftNostril, y = RightNostril)) +
geom_point()+
xlim(0,200) +
ylim(0,200) +
geom_abline(a=1, b=1) +
geom_text(aes(label = Subject))
remove <- numquizAntag$Subject[which(numquizAntag$n>8)]
#Lets just try eliminating these guys and running the same graphs from the other script and see if anything happens
df <- df[!(df$Subject %in% remove),] #eliminates these subjects
testData <- subset(df, TestMode == "No" & Procedure.SubTrial. == "ExperimentProc" & Subject !=1 & Subject != 2 & Subject !=57, select = c ("Subject", "Running.Block.", "Trial", "IntensityRatingAntag", "IntensityRatingFishy", "RightType", "LeftType"))
#convert scales (these scales are on a different scale than the previous scales)
#580 is zero on the scale and 80 is the highest
testData$FishyRating  <- 580 - as.integer(testData$IntensityRatingFishy)
testData$AntagRating  <- 580 - as.integer(testData$IntensityRatingAntag)
#make sure the conversion worked - there should be no items coming up in this test
checkConversion <- testData[which(testData$FishyRating < 0 | testData$AntagRating <0),]
#make new labels and averages
testData.sub <- subset(testData, select = c("Subject", "Running.Block.", "Trial","RightType", "LeftType", "FishyRating", "AntagRating"))
#write.csv(testData.sub, "/Volumes/storage/mainland/Projects/TMA\ blocker/Split\ Nostril\ Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/SplitNostrilDataSummer2016.csv") #This outputs a file that Sianneh was using to analyze data for MSAP project
# testData.excel <- merge(testData.sub, nostriltyperelabel)
# #this doesn't work #testData.excel.fishy <- subset(testData.excel, select = c("Subject", "Running.Block.", "OdorType", "FishyRating"))
# testData.excel.antagcontrol <- subset(testData.excel, select = c("Subject", "Running.Block.", "OdorType", "FishyRating", "AntagRating"))
# write.csv(testData.excel.antagcontrol, "/Volumes/mainland/Projects/TMA\ blocker/Split\ Nostril\ Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/SplitNostrilDataSummer2016_FinalDataset.csv")
testData.melt <- melt(testData.sub, c("Subject", "Running.Block.", "Trial","RightType", "LeftType"), factorsAsStrings = FALSE)
testData.melt$value <- as.double(testData.melt$value)
testData.melt <- rename(testData.melt, c("variable" = "IntensityRating")) #rename variable
testDataBlock1 <- ddply(.data = subset(testData.melt, Running.Block. == "Test1"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Nonenol" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Nonenol"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Nonenol") | (RightType == "Nonenol" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Nonenol" | LeftType == "TMA+Nonenol"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock2 <- ddply(.data = subset(testData.melt, Running.Block. == "Test2"), .variables = c("Subject", "IntensityRating", "Running.Block."), function(x) c(AntagAlone = mean(subset(x, (RightType == "Linalool" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "Linalool"))$value), TMAAlone = mean(subset(x, (RightType == "TMA" & LeftType == "Blank") | (RightType == "Blank" & LeftType == "TMA"))$value), DifferentNostrils = mean(subset(x, (RightType == "TMA" & LeftType == "Linalool") | (RightType == "Linalool" & LeftType == "TMA"))$value), SameNostril= mean(subset(x, (RightType == "TMA+Linalool" | LeftType == "TMA+Linalool"))$value), Blank= (mean(subset(x, (RightType == "Blank" & LeftType == "Blank"))$value))))
testDataBlock1.melt <- melt(testDataBlock1, c("Subject", "IntensityRating", "Running.Block."))
testDataBlock2.melt <- melt(testDataBlock2, c("Subject", "IntensityRating", "Running.Block."))
#The other way to relabel so we can see all the points from one person
nostriltyperelabel <- read.csv("/Volumes/mainland/Projects/TMA\ blocker/Split\ Nostril\ Study/Setup2-Olfactometer/Raw\ Data\ 3-2016/NostrilTypeRelabel.csv")
testDataRename <- merge (testData.melt, nostriltyperelabel)
scale01 <- function(value, minValue, maxValue) {
(value - minValue)/(maxValue - minValue)
}
#plan: Find min and max for each participant and then calculate the value using the scale function.
#this is normalizing by scale usage during the experiment, rather than overall scale usage during the trial
#later I can try normalizing by the scale usage from the beginning of the data
#work with testDataRename
subjMinMax <- ddply(testDataRename, .variables = c("Subject"), .fun = summarize, minValue = min(value), maxValue = max(value))
testDataMinMax <- merge(testDataRename, subjMinMax)
testDataMinMax$normValue <- scale01(testDataMinMax$value, testDataMinMax$minValue, testDataMinMax$maxValue)
testDataMinMax$Running.Block. <- factor(testDataMinMax$Running.Block., levels = c("Test1", "Test2"), labels = c("Nonenol", "Linalool"))
testDataMinMax$OdorType <- factor(testDataMinMax$OdorType, levels = c("TMAAlone", "DifferentNostrils", "SameNostril", "Blank", "AntagAlone"))
#export this df for Sianneh to learn some R with
#write.csv(testDataMinMax, "/Volumes/mainland/Users/Sianneh\ Vesslee/R_SplitNostrilData_graph")
ggplot(testDataMinMax, aes(x = OdorType, y = normValue)) +
geom_violin() +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Normalized Intensity Rating") +
ylab("Nostril Type")
ggplot(testDataMinMax, aes(x = OdorType, y = normValue)) +
geom_boxplot() +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Normalized Intensity Rating") +
ylab("Nostril Type")
#graph to match Sianneh's
testDataAverages <- ddply(testDataMinMax, .variables = c("Running.Block.", "OdorType", "IntensityRating"), .fun = summarize, average = mean(normValue), stdev = sd(normValue), stderror= stdev/sqrt(length(normValue)))
ggplot(testDataAverages, aes(x = OdorType, y = average, fill = OdorType)) +
geom_bar(stat = "identity") +
facet_grid(IntensityRating ~ Running.Block.) +
xlab("Nostril Type") +
ylab("Normalized Intensity Rating") +
geom_errorbar(aes(ymin = average-stderror, ymax = average+stderror), position = "dodge")
setwd("/Volumes/mainland/Users/Sianneh\ Vesslee/")
library(ggplot2)
#import data
Data <- read.csv("R_SplitNostrilData_graph")
Data$OdorType <- factor(Data$OdorType, levels = c("TMAAlone", "DifferentNostrils", "SameNostril", "AntagAlone", "Blank"), labels = c("TMA Alone", "Different Nostrils", "Same Nostrils", "Antagonist Alone", "Blank"))
Data$Running.Block. <- factor(Data$Running.Block., levels = c("Nonenol", "Linalool"), labels = c("Trans-2-nonen-1-ol", "Linalool"))
Data$IntensityRating <- factor(Data$IntensityRating, levels = c("FishyRating", "AntagRating"), labels = c("Fishy Rating", "Antagonist Rating"))
#graph
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 14),
strip.text.x = element_text(size = 18),
strip.text.y = element_text(size = 18),
strip.background = element_rect(fill = 'white'),
text = element_text(size=18)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 16),
strip.text.x = element_text(size = 18),
strip.text.y = element_text(size = 18),
strip.background = element_rect(fill = 'white'),
text = element_text(size=18)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 28),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 18),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
pdf("FinalGraphAntag.pdf", height = 8, width = 18)
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 18),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 18, color = "black"),
strip.text.x = element_text(size = 20),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Intensity Ratings") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 18, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 20),
strip.background = element_rect(fill = 'white'),
text = element_text(size=20)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
pdf("FinalGraphAntag.pdf", height = 8, width = 18)
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
pdf("FinalGraphAntag.pdf", height = 8, width = 18)
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0)
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
pdf("FinalGraphAntag.pdf", height = 8, width = 18)
#Data.sub <- subset(Data, IntensityRating == "Fishy Intensity" & Running.Block. == "Trans-2-nonen-1-ol")
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Trans-2-nonen-1-ol"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Linalool"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
pdf("FinalGraphControl.pdf", height = 8, width = 14)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Linalool"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
pdf("FinalGraphControl.pdf", height = 8, width = 18)
ggplot(data = subset(Data, IntensityRating == "Fishy Rating" & Running.Block. == "Linalool"), aes(x = OdorType , y = normValue, fill = OdorType)) + #this is what you are graphing on the x and y axis.
geom_violin() + #this is the type of plot
facet_grid(IntensityRating ~ Running.Block. ) +    #So you can get all the same plots on one graph
ylab("Normalized Fishy Intensity Rating") +
xlab("") +
guides(fill = FALSE) +
theme(
panel.background = element_rect(fill = "white"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text = element_text(size = 25, color = "black"),
strip.text.x = element_text(size = 28),
strip.text.y = element_text(size = 0),
strip.background = element_rect(fill = 'white'),
text = element_text(size=24)
) +
stat_summary(fun.y = "median", fun.ymin = "median", fun.ymax= "median", size= 0.5, geom = "crossbar", position = position_dodge(width = 0.9), width = .70, show_guide = F)
dev.off()
