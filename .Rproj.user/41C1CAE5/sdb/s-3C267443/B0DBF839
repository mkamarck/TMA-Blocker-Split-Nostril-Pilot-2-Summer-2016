{
    "contents" : "#Setup3 analysis\n#This is setup of the split nostril experiment was run by MK and SV during MSAP summer 2016. The machine was fully cleaned, lines were shortened, and the odors are being refreshed more often in order to reduce variability\n#Analysis will follow here. \n#Subject 1 =SV (data can't be used)\n#Subject 2 = YI (in lab - data can't be used)\n\n#Import Libraries\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(plyr)\n\n#read all files from directory\nsubj <- dir(path = \"/Volumes/mainland/Projects/TMA blocker/Split Nostril Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/DataPilot2/\", pattern=\"\\\\.txt$\", full.names=TRUE)# creating a list of all file names\nnames(subj)  <- basename(subj)\ndf  <- ldply(subj, read.delim, stringsAsFactors=FALSE)\n\n#check number of participants\nnumParticipants <- length(unique(df$Subject))\n#subset to get the test data\ntestData <- subset(df, TestMode == \"No\" & Procedure.SubTrial. == \"ExperimentProc\", select = c (\"Subject\", \"Running.Block.\", \"Trial\", \"IntensityRatingAntag\", \"IntensityRatingFishy\", \"RightType\", \"LeftType\"))\n#get the training data from the scale\nscaleTrainingData <- subset(df, Procedure.Block. == \"ScaleTrainingProc\", select = c(\"Subject\", \"Procedure.Block.\", \"ScaleTraining\", \"Question.Trial.\", \"IntensityRatingTraining.Trial.\"))\n#get the training data from the smell training (quiz and such)\nsmellTrainingQuiz <- subset(df, Procedure.Trial. == \"training\" | Procedure.Trial. == \"Quiz\", select = c(\"Subject\", \"Procedure.Block.\", \"IntensityRatingTraining.Trial.\", \"OdorType\", \"Procedure.Trial.\", \"Descriptor\", \"QuizPage.RESP\"))\n\n\n#convert scales (these scales are on a different scale than the previous scales)\n#580 is zero on the scale and 80 is the highest\ntestData$FishyRating  <- 580 - as.integer(testData$IntensityRatingFishy)\ntestData$AntagRating  <- 580 - as.integer(testData$IntensityRatingAntag)\n#make sure the conversion worked - there should be no items coming up in this test\ncheckConversion <- testData[which(testData$FishyRating < 0 | testData$AntagRating <0),]\n\n#make new labels and averages\ntestData.sub <- subset(testData, select = c(\"Subject\", \"Running.Block.\", \"Trial\",\"RightType\", \"LeftType\", \"FishyRating\", \"AntagRating\"))\n#write.csv(testData.sub, \"/Volumes/storage/mainland/Projects/TMA\\ blocker/Split\\ Nostril\\ Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/SplitNostrilDataSummer2016.csv\") #This outputs a file that Sianneh was using to analyze data for MSAP project\ntestData.melt <- melt(testData.sub, c(\"Subject\", \"Running.Block.\", \"Trial\",\"RightType\", \"LeftType\"), factorsAsStrings = FALSE)\ntestData.melt$value <- as.double(testData.melt$value)\ntestData.melt <- rename(testData.melt, c(\"variable\" = \"IntensityRating\")) #rename variable\n\ntestDataBlock1 <- ddply(.data = subset(testData.melt, Running.Block. == \"Test1\"), .variables = c(\"Subject\", \"IntensityRating\", \"Running.Block.\"), function(x) c(AntagAlone = mean(subset(x, (RightType == \"Nonenol\" & LeftType == \"Blank\") | (RightType == \"Blank\" & LeftType == \"Nonenol\"))$value), TMAAlone = mean(subset(x, (RightType == \"TMA\" & LeftType == \"Blank\") | (RightType == \"Blank\" & LeftType == \"TMA\"))$value), DifferentNostrils = mean(subset(x, (RightType == \"TMA\" & LeftType == \"Nonenol\") | (RightType == \"Nonenol\" & LeftType == \"TMA\"))$value), SameNostril= mean(subset(x, (RightType == \"TMA+Nonenol\" | LeftType == \"TMA+Nonenol\"))$value), Blank= (mean(subset(x, (RightType == \"Blank\" & LeftType == \"Blank\"))$value))))\ntestDataBlock2 <- ddply(.data = subset(testData.melt, Running.Block. == \"Test2\"), .variables = c(\"Subject\", \"IntensityRating\", \"Running.Block.\"), function(x) c(AntagAlone = mean(subset(x, (RightType == \"Linalool\" & LeftType == \"Blank\") | (RightType == \"Blank\" & LeftType == \"Linalool\"))$value), TMAAlone = mean(subset(x, (RightType == \"TMA\" & LeftType == \"Blank\") | (RightType == \"Blank\" & LeftType == \"TMA\"))$value), DifferentNostrils = mean(subset(x, (RightType == \"TMA\" & LeftType == \"Linalool\") | (RightType == \"Linalool\" & LeftType == \"TMA\"))$value), SameNostril= mean(subset(x, (RightType == \"TMA+Linalool\" | LeftType == \"TMA+Linalool\"))$value), Blank= (mean(subset(x, (RightType == \"Blank\" & LeftType == \"Blank\"))$value))))\ntestDataBlock1.melt <- melt(testDataBlock1, c(\"Subject\", \"IntensityRating\", \"Running.Block.\"))\ntestDataBlock2.melt <- melt(testDataBlock2, c(\"Subject\", \"IntensityRating\", \"Running.Block.\"))\n\n#make some graphs - then later make some graphs with normalized data - we want to make sure everything looks good first\nggplot(data = subset(testDataBlock1.melt, IntensityRating %in% \"FishyRating\"), aes(x = variable, y = value))+\n  geom_point(position = position_jitter(w = .1, h = .1)) +\n  facet_grid(Subject~.)\n\nggplot(data = subset(testDataBlock2.melt, IntensityRating %in% \"FishyRating\"), aes(x = variable, y = value))+\n  geom_point(position = position_jitter(w = .1, h = .1)) +\n  facet_grid(Subject~.)\n\n\n#normalizedData <- ddply(dfSubset, .variables = c(\"Subject\", \"Running.Block.\"), function(x) c(FishyRatingNorm = scale01(x$FishyRating), AntagRatingNorm = scale01(x$AntagRating)))\n#try normalization with and without by \"Running.Block.\"\n#we could also normalize it just to the fishy scale and by block or not by block - this would show us the biggest difference in fishy values. \n#####\n#DECIDE HOW WE WANT TO NORMALIZE THE DATA####\n#I'm scaling against other odors, we can also try normalizing to the initial scale training\nscale01 <- function(x){(x-min(x))/(max(x)-min(x))}\nnormalizedData <- ddply(testData.melt, .variables = c(\"Subject\"), summarize, scaleMin= min(\"value\"), scaleMax = max(\"value\"))\n\n\n",
    "created" : 1467914933474.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "670766278",
    "id" : "B0DBF839",
    "lastKnownWriteTime" : 1469044142,
    "path" : "/Volumes/storage/mainland/Projects/TMA blocker/Split Nostril Study/Setup2-Olfactometer/Code/SplitNostrilSetup_07_2016/Analysis.R",
    "project_path" : "Analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}